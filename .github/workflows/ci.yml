name: CI
on:
  push:
    branches:
      - '**'
    tags:
      - '*'
  schedule:
    - cron: '0 4 * * *'
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
    steps:
      - name: Set Environment Variables
        run: |
          TOOL_NAME=$(echo '${{ github.repository }}' |awk -F '/' '{gsub(/-/, "_", $0) ;print $NF}')
          echo "TOOL_NAME=$TOOL_NAME" >> $GITHUB_ENV
          echo "RELEASE=false" >> $GITHUB_ENV
          echo "VERSION=0.0.0ci0" >> $GITHUB_ENV
          echo "TOOL_DIR=$TOOL_NAME" >> $GITHUB_ENV
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "VERSION=$(echo ${{github.ref}} |  sed -r 's/^[\/a-zA-z-]+//')" >> $GITHUB_ENV
            if [[ $VERSION != *@(a|b)* ]]; then
              echo "RELEASE=true" >> $GITHUB_ENV
            fi
          fi
      - uses: actions/checkout@v2

      - name: Set package version
        run: |
          sed -E -i  "s/^__version__ = \"[a-z0-9\.]+\"/__version__ = \"${{ env.VERSION }}\"/g"  ${{ env.TOOL_DIR }}/_version.py

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Change to last ws-sdk version on odd days (Mon, Wed, Fri, Sun)
        run: |
          sdk_c_ver=$(grep "ws-sdk" requirements.txt | awk -F '=' '{print $NF}')
          sdk_t_ver=$(curl -sL https://pypi.org/pypi/ws-sdk/json | jq -r '.releases| keys[]' | sort -t. -k 1,1n -k 2,2n -k 3,3n | tail -n1)

          if (( $(date +"%u") % 2 )) ; then
            echo "Odd day - Replacing current ws-sdk version: ${sdk_c_ver} with latest release: ${sdk_t_ver}"
            sed -E -i "s/^ws-sdk.+/ws-sdk==${sdk_t_ver}/g" requirements.txt
          else
            echo "Even day"
          fi

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 wheel
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --ignore=E501,F841
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Unittesting
        run: python -m unittest

      - name: Create Wheel Package
        run: python setup.py bdist_wheel

      - name: Install Wheel package
        run: pip install dist/${{ env.TOOL_DIR }}-${{ env.VERSION }}-py3-none-any.whl

      - name: Full Test time-based parameters file
        run: $TOOL_NAME ./$TOOL_DIR/conf/params_ci_time_based.config
        env:
          WS_USER_KEY: ${{ secrets.WS_USER_KEY }}
          WS_ORG_TOKEN: ${{ secrets.WS_ORG_TOKEN }}
          SKIP_PROJECT_DELETION: 1
          DRY_RUN: 1

      - name: Full test Time-Based
        run: $TOOL_NAME -r 50000 -m FilterProjectsByUpdateTime -u ${{ secrets.WS_USER_KEY }} -k ${{ secrets.WS_ORG_TOKEN }} -y true -o /tmp

      - name: Full test Copy-Based
        run: $TOOL_NAME -r 50000 -m FilterProjectsByLastCreatedCopies -u ${{ secrets.WS_USER_KEY }} -k ${{ secrets.WS_ORG_TOKEN }} -y true -o /tmp

      - name: Publish to Test PyPI
        if: startsWith(github.ref, 'refs/tags/test-v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip_existing: true
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          verbose: true

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip_existing: true
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: dist/${{ env.TOOL_DIR }}-${{ env.VERSION }}-py3-none-any.whl
          prerelease: ${{ env.RELEASE != 'true' }}
          generateReleaseNotes: true

      - name: confluence-markdown-sync
        if: ${{ env.RELEASE == 'true' }}
        uses: cupcakearmy/confluence-markdown-sync@v1     
        with: 
          from: README.md
          to: 1864533094
          cloud: whitesource
          user: ${{ secrets.CONFLUENCE_USER }}
          token: ${{ secrets.CONFLUENCE_TOKEN }}

      - name: confluence-markdown-sync
        if: ${{ env.RELEASE == 'true' }}
        uses: cupcakearmy/confluence-markdown-sync@v1     
        with: 
          from: README.md
          to: 2319614065
          cloud: whitesource
          user: ${{ secrets.CONFLUENCE_USER }}
          token: ${{ secrets.CONFLUENCE_TOKEN }}
